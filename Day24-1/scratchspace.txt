inp w    |
mul x 0  |
add x z  |
mod x 26 |
div z 1    Call the implied boolean: must_divides
add x 12   Call the implied int A
eql x w  |
eql x 0  |
mul y 0  |
add y 25 |
mul y x  |
add y 1  |
mul z y  |
mul y 0  |
add y w  |
add y 7    Call the implied int B
mul y x  |
add z y  |


inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 10
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 26
add x -2
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 26
add x -10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 1
add x 13
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 11
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 26
add x -5
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 1
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13
mul y x
add z y


inp w
mul x 0
add x z
mod x 26
div z 26
add x -14
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 4
mul y x
add z y

int input {};
std::cin >> input;
int x {(z % 26) - 14}
z /= 26;
if (input != x)
    z *= 26;

if (input != x)
    z += input + 4;

inp w
mul x 0
add x z  
mod x 26 # x := z % 26
div z 26 # z /= 26
add x -5 # x -= 5
eql x w
eql x 0 # x <- w != (z % 26) - 5; z /= 26
mul y 0
add y 25 
mul y x 
add y 1 # y = 25 * x + 1
mul z y # z *= 25 * x + 1
mul y 0
add y w
add y 14 
mul y x # y = (w + 14) * x
add z y # z += y


int input {};
std::cin >> input;
int x {(z % 26) - 5} // 5 is A
z /= 26; // We divide, so must_divide is true.
if (input != x)
    z = z * 26 + input + 14; // 14 is B

"input must be z % 26 - 5 | z must be < 26"

z must be 0 for validity

.......

for (int i)